<html>
User Story: I can play a game of Tic Tac Toe with the computer.
<br>
User Story: My game will reset as soon as it's over so I can play again.
<br>
User Story: I can choose whether I want to play as X or O.

<div id="message"></div>
<div id="xOrY"></div>
<div id="placeHere">
  
</div>

<br>
TODO:<b>delay computer logic by 1 or 2 seconds<br>display that it is the computer's turn<br></b> 
<br>DONE
<br>0: display ttt grid
<br>1: Have user choose X or Y :leaving off at logging to console functio chhoseXorY<br>
3: add reset function <br>
5: upon reset, clear or new ttt class isntance (would clean upon new instance of class tttClass)
6:working on function game()<br>
7:working on gridUpdate  switch statement <br>
8:function game should call checkgameover to check if all boxes filled.<br>
9: add function checkIfUsed prevent changing box if it is used. add checkIfUsed as a test in gridUpdate. if comes back true prevent updates to box. 
10:::checkWinner() not alerting to winner<br>
11:create removeClick() and add to game() under checkWinner()<br>
12:in game() ->if checkWinner: after removeClick: update message to playerCurrent is winner then offer reset/newgame and changereset button to "play again"<br>
13check game(), will not return to human turn game->computerLogic->game in game()->if checkGameOver->if computerLogic add computer logic<br> 
<br>
move call of  checkWinner to function such that last click is updated, and then we can end game. <br> add winner logic , if all boxes filled, player X wins :: <br>add logic to end game when all boxes filled <br>:make function that addClick events call to update grid. thhat should then call game again<br>4return to function gamePlay, figure out logic on who goes first/ seconds etc<br> 2: add clickable elements to grid

</html>

<css>
</css>

<script>
// *******************
// starting functions
$(document).ready(function(){
  startGame();
  addClick();
  
  // displayGrid(); // this should come after user chooses player amout and XorY
  //$("#placeHere").html("HELLO")
 // $("#topLeft").click(function(){alert("HELLO MON!")});   //this will add click
}); // doc ready

function startGame(){    //starts the game, also come back here for a reset
  onePlayerOrTwo();  //was in document ready, moved here to make reset easier
} //end startGame


function tttClass(){           //TicTacToe class
  this.players="a";        //one or two
  this.player2="b";        // human or computer
  this.player1Letter= "c"; //X or Y
  this.player2Letter= "d"; //X or Y
  this.currentPlayer= "e"; //1 or 2
  this.completed = false;  // true or false
}

// ***************
// Grid and Display
//var gridArr = [["A","B","C"],[" "," "," "],[" "," "," "]];
var gridArr = [["_","_","_"],["_","_","_"],["_","_","_"]];

function displayGrid(ttt){
  var gridHTML = "";
  var topLeft='<span id="topLeft">__' + gridArr[0][0] + '__</span>';
  var topMiddle='<span id="topMiddle">__' + gridArr[0][1] + '__</span>';
  var topRight='<span id="topRight">__' + gridArr[0][2] + '__</span>';
  gridHTML = gridHTML  + topLeft + '|' +topMiddle+ '|' + topRight;
  
  var middleLeft='<span id="middleLeft">__' + gridArr[1][0] + '__</span>';
  var middleMiddle='<span id="middleMiddle">__' + gridArr[1][1] + '__</span>';
  var middleRight='<span id="middleRight">__' + gridArr[1][2] + '__</span>';
  gridHTML = gridHTML  + '<br>'+middleLeft + '|' +middleMiddle+ '|' + middleRight;
  
  var bottomLeft='<span id="bottomLeft">__' + gridArr[2][0] + '__</span>';
  var bottomMiddle='<span id="bottomMiddle">__' + gridArr[2][1] + '__</span>';
  var bottomRight='<span id="bottomRight">__' + gridArr[2][2] + '__</span>';
  gridHTML = gridHTML  + '<br>'+bottomLeft + '|' +bottomMiddle+ '|' + bottomRight + '<br>';
  
  //alert("cool");
   //$("#placeHere").html("HELLO")
  $("#placeHere").html(gridHTML);
  addClick(ttt); //added here becuase grid must display before click enabled
}//displayGrid

function addClick(ttt){
  $("#topLeft").click(function(){gridUpdate(ttt,"topLeft")}); 
  $("#topMiddle").click(function(){gridUpdate(ttt,"topMiddle")});                 
  $("#topRight").click(function(){gridUpdate(ttt,"topRight")});
  $("#middleLeft").click(function(){gridUpdate(ttt,"middleLeft")}); 
  $("#middleMiddle").click(function(){gridUpdate(ttt,"middleMiddle")});                 
  $("#middleRight").click(function(){gridUpdate(ttt,"middleRight")});
  $("#bottomLeft").click(function(){gridUpdate(ttt,"bottomLeft")}); 
  $("#bottomMiddle").click(function(){gridUpdate(ttt,"bottomMiddle")});                 
  $("#bottomRight").click(function(){gridUpdate(ttt,"bottomRight")});
} //addClick  

function removeClick(ttt){
  $("#topLeft").off(); 
  $("#topMiddle").off();                 
  $("#topRight").off();
  $("#middleLeft").off(); 
  $("#middleMiddle").off();                 
  $("#middleRight").off();
  $("#bottomLeft").off(); 
  $("#bottomMiddle").off();                 
  $("#bottomRight").off();
}//removeClick

// *******************************
// USER SELECTION

function onePlayerOrTwo(){  
  var question='<br>WOULD YOU LIKE ONE PLAYER OR TWO PLAYER GAME?';
  question += '<br><button id="onePlayer">ONE PLAYER</button>';
  question += '<button id="twoPlayer">TWO PLAYER</button>';
  var answer="";
  $("#xOrY").html(question);
  $("#onePlayer").click(function(){ 
    answer="one";console.log("function onePlayerOrTwo: number of players selected:" + answer); chooseXorY(answer);});
  $("#twoPlayer").click(function(){
    answer="two";console.log("function onePlayerOrTwo: number of players selected:" + answer); chooseXorY(answer);});  
}//end onePlayerOrTwo

function chooseXorY(numberOfPlayers){
  var question = "<br>";
  var answer = "";
  if (numberOfPlayers=="two"){question += "PLAYER 1: "}
  question += "Would you like to be X or Y?";
  question += '<br><button id="chooseX">CHOOSE X</button>';
  question += '<button id="chooseY">CHOOSE Y</button>';
  
  $("#xOrY").html(question);
  $("#chooseX").click(function(){ answer="X"; console.log("function chooseXorY: player choose " + answer); gameSetup(numberOfPlayers,answer) });
  $("#chooseY").click(function(){ answer="Y"; console.log("function chooseXorY: player choose " + answer);  gameSetup(numberOfPlayers,answer) });
} //chooseXorY

// *********************************************
// GAME LOGIC

function gameSetup(numberOfPlayers,player1Letter){
  console.log("We got to gameSetup: numberOfPlayers: " + numberOfPlayers + " ; player1Letter is " +player1Letter);
  //add reset Button : completed
  var addResetButton = '<br><button id="resetButton">RESET</button><p></p>';
  $("#xOrY").html(addResetButton);
  $("#resetButton").click(function(){ gridArr = [["_","_","_"],["_","_","_"],["_","_","_"]];startGame(); console.log("RESET WAS PRESSED")});
  
  //start ttt class
  var ttt=new tttClass();
  ttt.players=numberOfPlayers;
  if(numberOfPlayers === "two"){ttt.player2="human"} else {ttt.player2 = "computer"}
  ttt.player1Letter = player1Letter;
  if(player1Letter==="X"){ttt.player2Letter="Y"}else{ ttt.player2Letter="X";}
  if(player1Letter ==="X"){ttt.currentPlayer="player1"}else{ttt.currentPlayer="player2"}
  
  game(ttt);
  
} //gameSetup()


function game(ttt){
  console.log("in function game():" + ttt.players + " " + ttt.player2 + " " + ttt.player1Letter + " " + ttt.player2Letter + " " + ttt.currentPlayer)
  console.log(ttt.currentPlayer)

    var letter="?"
    if(ttt.currentPlayer=="player1"){letter=ttt.player1Letter}
    if(ttt.currentPlayer=="player2"){letter=ttt.player2Letter}  
  if(checkWinner(ttt,letter)){
      displayGrid(ttt);
      //setTimeout(function(){alert("we are in game and checked winner");},1000);
      //not all cases make winner: check why :: CHECKED ALL CASES IS OK
         
      //from here make the grid unclickable.
      ttt.completed=true; //(adding becuase otherwise displaygrid below will overwrite removeClick
      removeClick(ttt);
      $("#message").html(ttt.currentPlayer +' is the winner!!!'); alert(ttt.currentPlayer + " won the game!!!!");
      // end the game, offer restart 
      $("#xOrY").html('<button id="resetButton">CLICK HERE FOR A NEW GAME!!!!!!</button>')
      $("#resetButton").click(function(){ gridArr = [["_","_","_"],["_","_","_"],["_","_","_"]];startGame(); console.log("NEW GAME WAS PRESSED")});
      //then end game
     } //end if checkWinner
  

  // what if grid has been filled? game over:
  else if (!checkGameOver(ttt))
  {
    // ********************************************************************computer logic
    //see if computer turn
    if(ttt.player2=="computer" && ttt.currentPlayer=="player2"){  //setTimeout(function(){alert("COMPUTER TURN!!");},1000);
     //run computerLogic(ttt)
      computerLogic(ttt);  //*** IF READING THIS WORK ON computerLogic() THEN COME BACK HERE
    }//if ttt.player2 is computer                                                           
    
    // displayGrid(ttt)?  with a delay?
    //possbile below add if not computer then do below else game()?
    // ******************************************************************** end add of computer logic
    else{   // ******************************************************else added for computerLogic
    var message = ttt.currentPlayer + " it is your turn.";
    $("#message").html(message)
  
    // display grid + add clickable elements
    displayGrid(ttt);
    }   // end else ******************************************************else added for computerLogic
  } //if not gameover
  // playerX turn : if game singleplayer: human/computer turn ; if game multiplayer: give to player1 or 2 depending on what player1 chose
  // playerY turn : if game singleplayer: human/computer turn ; if game multiplayer: give to player1 or 2 depending on what player1 chose
  
} //game

function gridUpdate(ttt,gi){ //gridItem = gi
 
//var gridArr = [["_","_","_"],["_","_","_"],["_","_","_"]];
console.log("in function gridUpdate():" + ttt.players + " " + ttt.player2 + " " + ttt.player1Letter + " " + ttt.player2Letter + " " + ttt.currentPlayer)
console.log(gi);  
 //which player is current player
 //var current = ttt.currentPlayer;
 //what is current players letter
  var letter="?"
  if(ttt.currentPlayer=="player1"){letter=ttt.player1Letter}
  if(ttt.currentPlayer=="player2"){letter=ttt.player2Letter}  
 if(!checkIfUsed(ttt,gi)){ 
  //update grid with letter
  switch(gi){
    case "topLeft"  :  gridArr[0][0] = letter; break;  
    case "topMiddle":  gridArr[0][1] = letter; break;
    case "topRight" :  gridArr[0][2] = letter; break; //console.log("We got into switch statement"); break;
    case "middleLeft"  :  gridArr[1][0] = letter; break;  
    case "middleMiddle":  gridArr[1][1] = letter; break;
    case "middleRight" :  gridArr[1][2] = letter; break; //console.log("We got into switch statement"); break;  
    case "bottomLeft"  :  gridArr[2][0] = letter; break;  
    case "bottomMiddle":  gridArr[2][1] = letter; break;
    case "bottomRight" :  gridArr[2][2] = letter; break; //console.log("We got into switch statement"); break;    
  }
  console.log(gridArr);
  //check if winner 
  if(!checkWinner(ttt,letter)){    //alert("WINNER");}  //********************************************* 
  //*** here make currentplayer not change if win and in game, end game if checkWinner true
   
 //change current player to other player
  if(ttt.currentPlayer=="player1"){ttt.currentPlayer="player2"} else {ttt.currentPlayer="player1"}
  } //end if checkWinner ******************************************************************************
 //call game 
  game(ttt);
 }//checkIfUsed
}//gridUpdaate


function checkGameOver(ttt){
  var gameover = true;
  if (ttt.completed == true){console.log("in gameover : ttt.completed is:"+ttt.completed);return true;}
  for(i=0;i<gridArr.length;i++)
    {
      for(j=0;j<gridArr[i].length;j++)
        {
          if(gridArr[i][j]=="_"){gameover=false;}
        }
    }
  if(gameover==true) {console.log("GAME OVER"); displayGrid(ttt); $("#message").html('<b>GAME OVER</b>')}
  return gameover;
}// end checkGameOVer


function checkIfUsed(ttt,gi){  //gridItem = gi
  var used = false;
  switch(gi){
    case "topLeft"  :     if (gridArr[0][0] != "_"){used = true;}  break;  
    case "topMiddle":     if (gridArr[0][1] != "_"){used = true;}  break;
    case "topRight" :     if (gridArr[0][2] != "_"){used = true;}   break; //console.log("We got into switch statement"); break;
    case "middleLeft"  :  if (gridArr[1][0] != "_"){used = true;}   break;  
    case "middleMiddle":  if (gridArr[1][1] != "_"){used = true;}   break;
    case "middleRight" :  if (gridArr[1][2] != "_"){used = true;}   break; //console.log("We got into switch statement"); break;  
    case "bottomLeft"  :  if (gridArr[2][0] != "_"){used = true;}   break;  
    case "bottomMiddle":  if (gridArr[2][1] != "_"){used = true;}   break;
    case "bottomRight" :  if (gridArr[2][2] != "_"){used = true;}   break; //console.log("We got into switch statement"); break;    
  }  
  //if(used == true){alert(gi + " has already been used")}
  return used;//return true or false
}

function checkWinner(ttt,letter){  // check after click approved  
   //var gridArr = [["_","_","_"],
  //                ["_","_","_"],
  //                ["_","_","_"]]; 
  var winner = false;
  console.log("inside checkWinner this is letter:" +letter);
  if(gridArr[0][0] == letter && gridArr[0][1] == letter && gridArr[0][2] == letter ){winner = true}  //top 
  if(gridArr[1][0] == letter && gridArr[1][1] == letter && gridArr[1][2] == letter ){winner = true}  //middle
  if(gridArr[2][0] == letter && gridArr[2][1] == letter && gridArr[2][2] == letter ){winner = true}  //bottom 
  if(gridArr[0][0] == letter && gridArr[1][0] == letter && gridArr[2][0] == letter ){winner = true}  //left toptobottom
  if(gridArr[0][1] == letter && gridArr[1][1] == letter && gridArr[2][1] == letter ){winner = true}  //middle toptobottom
  if(gridArr[0][2] == letter && gridArr[1][2] == letter && gridArr[2][2] == letter ){winner = true}  //right toptobottom
  if(gridArr[2][0] == letter && gridArr[1][1] == letter && gridArr[0][2] == letter ){winner = true}  //bottom left to top right x
  if(gridArr[0][0] == letter && gridArr[1][1] == letter && gridArr[2][2] == letter ){winner = true}  //top left to bottom right x
  //f(winner){console.log("we have a winner ");  alert("winner inside checkWinner");}
  //console.log("inside checkWinner: " +gridArr[0][0]+gridArr[0][1]+gridArr[0][2]);
  return winner;
}

// ***********************************************************
// ******************************************************COMPUTER LOGIC

function computerLogic(ttt){
  //get computer letter
  var letter="?"
  var freeBoxFound=false;
  var grid1=-1;
  var grid2=-1;
  if(ttt.currentPlayer=="player1"){letter=ttt.player1Letter}
  if(ttt.currentPlayer=="player2"){letter=ttt.player2Letter}
  //console.log("computer is " +ttt.currentPlayer + " with letter: " +letter);
  //randomly pick a free box
  //for(i=0;i<10;i++){var myRand=(Math.floor(Math.random()*3) );console.log(myRand);} //this generates rand between 0-2
   //var grid1=Math.floor(Math.random()*3);
   //var grid2=Math.floor(Math.random()*3);   
   while(freeBoxFound==false){
     grid1=Math.floor(Math.random()*3);grid2=Math.floor(Math.random()*3);
     if(gridArr[grid1][grid2]=="_"){freeBoxFound=true}
   } //while  
  console.log("IN computerLogic(): this is gridArr " + grid1+ " "+ grid2+ ":"+gridArr[grid1][grid2]);
  gridArr[grid1][grid2]=letter;
  //changecurrent player  
  ttt.currentPlayer="player1";//if(ttt.currentPlayer=="player2"){ttt.currentPlayer=="player2"}else{ttt.currentPlayer=="player1"}
  displayGrid(ttt);
  game(ttt);
  //return completed  
}//computerLogic

//dont need this. checkGameOver runs before we get into computerLogic
function isThereAFreeBox(ttt){   //return true or false : there is a freeBox to use, ie: box is == "_"
  var freeBox=false;
  for(i=0;i<gridArr.length;i++)
    {
      for(j=0;j<gridArr.length;j++)
        {
          if(gridArr[i][j] == "_"){freeBox = true;}
        }
    }
  return freeBox;
}  //for computerLogic. is there a box that is available to use
</script>
