<html>
<!--
User Story: I am presented with a random series of button presses.
<br>
User Story: Each time I input a series of button presses correctly, I see the same series of button presses but with an additional step.
<br>
User Story: I hear a sound that corresponds to each button both when the series of button presses plays, and when I personally press a button.
<br>
User Story: If I press the wrong button, I am notified that I have done so, and that series of button presses starts again to remind me of the pattern so I can try again.
<br>
User Story: I can see how many steps are in the current series of button presses.
<br>
User Story: If I want to restart, I can hit a button to do so, and the game will return to a single step.
<br>
User Story: I can play in strict mode where if I get a button press wrong, it notifies me that I have done so, and the game restarts at a new random series of button presses.
<br>
User Story: I can win the game by getting a series of 20 steps correct. I am notified of my victory, then the game starts over.
<br>
-->
<p>
<div id="configButtons" >
  <span id="startOrRestart">Place start or restart button here</span>
  <span id="strict">Place strict button here</span>
</div>
<div id="roundIntro">Number of Steps in this round: <span id="round"></span></div>
<div id="simonButtons" class="container">
  <div class="row">
  <div id="boxGreen" class="box col-xs-4"></div>
  <div id="boxRed" class="box col-xs-4"></div>
  </div>
  <div class="row">
  <div id="boxYellow" class="box col-xs-4"></div>
  <div id="boxBlue" class="box col-xs-4"></div>  
  </div>  
</div>
<button id="test">TEST</button>
<audio id="soundRed" ><source src="https://s3.amazonaws.com/freecodecamp/simonSound1.mp3" type="audio/mpeg" ></audio>
<audio id="soundBlue"><source src="https://s3.amazonaws.com/freecodecamp/simonSound2.mp3" type="audio/mpeg"></audio>
<audio id="soundYellow"> <source src="https://s3.amazonaws.com/freecodecamp/simonSound3.mp3" type="audio/mpeg"></audio>
<audio id="soundGreen">  <source src="https://s3.amazonaws.com/freecodecamp/simonSound4.mp3" type="audio/mpeg"></audio>


<br><b> displayRoundsToUser(simon); //call function that displays  moves "one to current"
  <br>work on light on click <br>enable sound on click</b>
<br>function needed
<br>gameInitiate -- initiate the program
<br>game start -- start the actual game instance
<br>simon class: holds array? strictmode on? 
<br>randomizer function, to choose between colors,0-3
<br>reset function/button: reset game
<br>sound function, to play sound
<br>display function: show game gfx
<br>button enable strict mode
<br>current step count display
<br>
DONE:1:Working on: function buttonChangeColor: add sound
</html>

<css>
.box {width:100px;height:100px}
#boxRed{background:#f00;}
#boxBlue{background:#00f;}
#boxYellow {background:#FFFF00}
#boxGreen {background:#0f0;}
</css>

<script>
// *****************************************
// INITIALIZE *****************************
$(document).ready(function(){
  //$("#startOrRestart"). text("THIS IS WHERE THE START OR RESTART BUTTONS GO");
  //  document.getElementById("soundRed").loop = true;
  gameInit();
  //soundOnClick();
  //lightOnClick();
  //buttonChangeColor(0)
  //clickEnable();
  //clickDisable();
}); //document ready

function buttonCreateStart(){
  var b='<button id="buttonStart">START GAME</button>';
  $("#startOrRestart").html(b);
} //buttonCreateStart

function buttonCreateStrict(){
  var b='<button id="buttonStrict">STRICT MODE</button>';
  $("#strict").html(b);
}

function SimonClass(){  //class 
  this.round=[];
  this.strict=false; //true or false
  this.roundCurrent=5; //should be less or equal  roundMax at all times
  
  this.roundMax=5; //FOR TESTING ONLY change to 20 in production
}//end simon 

function gameInit(){ //initialize game
  var simon = new SimonClass;  
  buttonCreateStart();
  buttonCreateStrict();
  buttonStrictEnable(simon);
  buttonStartEnable(simon);
  displayRoundCount(simon);
  
}//end gameInit

function buttonStrictEnable(simon){$("#buttonStrict").click(function(){
  if(simon.strict==false){simon.strict=true}else{simon.strict=false}; console.log("simon.strict is:" +simon.strict)}) 
};//buttonStrictEnable
function buttonStartEnable(simon){$("#startOrRestart").click(function(){
  if(simon.round.length==0){alert("START GAME")} else {alert("restart game")}
  gameStart(simon);
})}//buttonStartEnable

// *********************************************************
// GAME LOGIC***********************************************

function  gameStart(simon){ //function for starting the game
  for(i=0;i<simon.roundMax;i++){simon.round[i]=Math.floor(Math.random()*4);}    //create allmoves
  clickDisable(); //disable buttons
  //call game function
  console.log(simon.round);
  game(simon);  
} //end gameStart


function game(simon){//GAME FUNCTION
  //check if win
  
  //update roundCurrent
  if(simon.roundCurrent==null){simon.roundCurrent=1}else{simon.roundCurrent++;} 
  displayRoundCount(simon);
  //call function that displays  moves "one to current"
  displayRoundsToUser(simon);
  //enable clicks
  //function that inputs clicks to match moves
  console.log("Im in function game")
}//end game


function buttonChangeColor(buttonNumber){  // from 12oclock: red blue yellow green  0,1,2,3
  var whichButton = null;
  var newColor = "#FFFFFF";
  var sound = "";
  switch(buttonNumber){
    case 0: whichButton="#boxRed";    newColor="#000000"; sound=soundRed;     break; //ff8080
    case 1: whichButton="#boxBlue";   newColor="#000000"; sound=soundBlue;    break; //66a3ff
    case 2: whichButton="#boxYellow"; newColor="#000000"; sound=soundYellow;  break; //ffffcc
    case 3: whichButton="#boxGreen";  newColor="#000000"; sound=soundGreen;   break; //b3ffcc
   } //switch
  //now change color for 1 second.
  $(whichButton).css("background", newColor);
  //play sound for 1 second also
  //soundRed.play();
  sound.play();
  //change back after 1 second
  setTimeout(function(){$(whichButton).removeAttr( 'style' );},900); 
}//buttonChangeColor


var soundRed=document.getElementById("soundRed");
var soundBlue=document.getElementById("soundBlue");
var soundYellow=document.getElementById("soundYellow");
var soundGreen=document.getElementById("soundGreen");

// *********************************************************
// Display functions *************************************
function displayRoundCount(simon){
  var html = "";
  //if(arguments.length == 0){   console.log("No arguments in displaySteps()");   html += "--"  }
  //else {    console.log("simon.round.length is "+simon.round.length);    html=simon.round.length;  }
  if (simon.roundCurrent==null){html="--"}else{html=simon.roundCurrent}
  $("#round").text(html);
}  //end displayRoundCount

function displayRoundsToUser(simon){
  
  //for(i=0;i<simon.roundCurrent;i++)  //dont use loop //https://scottiestech.info/2014/07/01/javascript-fun-looping-with-a-delay/
(function theLoop (i,simon) {    // ***********************************************************************************************************************
  setTimeout(function () {
    //alert("simon i = " +simon.round + " ||| " + i + " |||" +simon.round[i]); 
    buttonChangeColor(simon.round[i]);;    //change color of box   //wait 1 second then uncolor
    if (i<simon.roundCurrent) {          // If i > 0, keep going
      i++;theLoop(i,simon);       // Call the loop again, and pass it the current value of i
    }
  }, 1600);
})(0,simon);                    // ***********************************************************************************************************************
}//displayRoundsToUser

function clickEnable(){    
  $("#boxRed").click(function(){alert("You clicked Red")});
  $("#boxGreen").click(function(){alert("You clicked Green")});
  $("#boxYellow").click(function(){alert("You clicked Yellow")});
  $("#boxBlue").click(function(){alert("You clicked Blue")});
} //end clickEnable

function clickDisable(){
  $("#boxRed").off();
  $("#boxGreen").off();
  $("#boxYellow").off();
  $("#boxBlue").off();
}

function soundOnClick(){
//var soundRed=document.getElementById("soundRed");
//var soundBlue=document.getElementById("soundBlue");
//var soundYellow=document.getElementById("soundYellow");
//var soundGreen=document.getElementById("soundGreen");  
  $("#boxRed").click(function(){soundRed.play()})  //works
  $("#boxBlue").click(function(){soundBlue.play()})
  $("#boxYellow").click(function(){soundYellow.play()})
  $("#boxGreen").click(function(){soundGreen.play()})
}//soundOnClick

function lightOnClick(){
  $("#boxRed").mousedown(function()
                     {$("#boxRed").css("background", "#000000"); //setTimeout(function(){$("#boxRed").removeAttr('style');},1000);
                     
  });  //ff8080
  $("#boxRed").mouseup(function(){$("#boxRed").removeAttr('style'); //alert("mouseup called")
                                 })
  $("#boxRed").mouseout(function(){$("#boxRed").removeAttr('style');});
  $("#boxBlue").mousedown(function(){$("#boxBlue").css("background","#000000")});
  $("#boxBlue").mouseup(function(){$("#boxBlue").removeAttr('style')});
  $("#boxBlue").mouseout(function(){$("#boxBlue").removeAttr('style');});
  $("#boxGreen").mousedown(function(){$("#boxGreen").css("background","#000000")});
  $("#boxGreen").mouseup(function(){$("#boxGreen").removeAttr('style')});
  $("#boxGreen").mouseout(function(){$("#boxGreen").removeAttr('style');});
  $("#boxYellow").mousedown(function(){$("#boxYellow").css("background","#000000")});
  $("#boxYellow").mouseup(function(){$("#boxYellow").removeAttr('style')});
  $("#boxYellow").mouseout(function(){$("#boxYellow").removeAttr('style');});
  
}

// $(whichButton).css("background", newColor);
</script>
