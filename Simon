<html>
<!--
User Story: I am presented with a random series of button presses.
<br>
User Story: Each time I input a series of button presses correctly, I see the same series of button presses but with an additional step.
<br>
User Story: I hear a sound that corresponds to each button both when the series of button presses plays, and when I personally press a button.
<br>
User Story: If I press the wrong button, I am notified that I have done so, and that series of button presses starts again to remind me of the pattern so I can try again.
<br>
User Story: I can see how many steps are in the current series of button presses.
<br>
User Story: If I want to restart, I can hit a button to do so, and the game will return to a single step.
<br>
User Story: I can play in strict mode where if I get a button press wrong, it notifies me that I have done so, and the game restarts at a new random series of button presses.
<br>
User Story: I can win the game by getting a series of 20 steps correct. I am notified of my victory, then the game starts over.
<br>
-->
<p>
<div id="configButtons" >
  <span id="startOrRestart">Place start or restart button here</span>
  <span id="strict">Place strict button here</span>
</div>
<div id="roundIntro">Number of Steps in this round: <span id="round"></span></div>
<div id="simonButtons" class="container">
  <div class="row">
  <div id="boxGreen" class="box col-xs-4"></div>
  <div id="boxRed" class="box col-xs-4"></div>
  </div>
  <div class="row">
  <div id="boxYellow" class="box col-xs-4"></div>
  <div id="boxBlue" class="box col-xs-4"></div>  
  </div>  
</div>
<button id="test">TEST</button>
<audio id="soundRed" ><source src="https://s3.amazonaws.com/freecodecamp/simonSound1.mp3" type="audio/mpeg" ></audio>
<audio id="soundBlue"><source src="https://s3.amazonaws.com/freecodecamp/simonSound2.mp3" type="audio/mpeg"></audio>
<audio id="soundYellow"> <source src="https://s3.amazonaws.com/freecodecamp/simonSound3.mp3" type="audio/mpeg"></audio>
<audio id="soundGreen">  <source src="https://s3.amazonaws.com/freecodecamp/simonSound4.mp3" type="audio/mpeg"></audio>


<br><b> displayRoundsToUser(simon); //call function that displays  moves "one to current"
  <br>work on light on click <br>enable sound on click</b>
<br>function needed
<br>gameInitiate -- initiate the program
<br>game start -- start the actual game instance
<br>simon class: holds array? strictmode on? 
<br>randomizer function, to choose between colors,0-3
<br>reset function/button: reset game
<br>sound function, to play sound
<br>display function: show game gfx
<br>button enable strict mode
<br>current step count display
<br>
DONE:1:Working on: function buttonChangeColor: add sound
</html>

<css>
.box {width:100px;height:100px}
#boxRed{background:#f00;}
#boxBlue{background:#00f;}
#boxYellow {background:#FFFF00}
#boxGreen {background:#0f0;}
</css>

<script>

// *****************************************
// INITIALIZE *****************************
$(document).ready(function(){
  //add ability to start button so it can initialize game
  
  //add ability to strict button to change var strict
  $("#test").click(function(){$("#startOrRestart").html('<button id="start">START</button>');$("#start").click(function(){clickStart();})});
  $("#buttonStrict").click(function(){clickStrict();});
  $("#buttonStart").click(function(){clickStart();});
  displayRoundCount();
  //gameInit();
  //soundOnClick();
  //lightOnClick();
  //buttonChangeColor(0)
  //clickEnable();
  //clickDisable();
}); //document ready


var strict=false;
//below taken from class SimonClass
var roundArr = [];
var roundCurrent = null//null;
var roundMax=4; //FOR TESTING ONLY change to 20 in production
var clickCounterUser = 0   //set to 0 in gameUserInput

function clickStrict(){if(strict==false){strict=true; $("#isStrictEnabled").text("Strict is ON")}else{strict=false; $("#isStrictEnabled").text("Strict is OFF")}   }
function clickStart(){alert("STARTING GAME!");
  //create restart button to replace start //attach function to restart
  var html = '<button id="buttonRestart">RESTART GAME</button>';$("#startOrRestart").html(html);  $("#buttonRestart").click(function(){clickRestart()});                    
  //initiate game
  gameInit();                    
} //clickStart
function clickRestart(){alert("YOU PRESSED RESTART!"); roundArr=[]; roundCurrent=null;clickCounterUser = 0;gameInit();}  // *************************
function displayRoundCount(){  var html = "";  if (roundCurrent==null){html="--"}else{html=roundCurrent}  $("#round").text(html);}  //end displayRoundCount

function gameInit(){  displayRoundCount(); 
 //prepoulate moves in roundArr                  
 for(i=0;i<roundMax;i++){roundArr[i]=Math.floor(Math.random()*4);}
 console.log("gameInit(): roundArr: "+roundArr);
 roundCurrent=1;   // **** AFTER TESTING  uncomment this **************************************************************************************************                
 gameMain();                   
}//end gameInit

function gameMain(){console.log("gameMain() called")
  //display moves  **might be better in recursive? function game because this only initiates. 
 // if(roundCurrent==null){roundCurrent=1}                  
  displayRoundCount();
  //display Moves to user:
  displayRoundsToUser()                  
} //gameMain


function displayRoundsToUser(){  
  clickDisable();
 (function theLoop (i) {setTimeout(function () {buttonChangeColor(roundArr[i]); 
  if(i==roundCurrent-1){console.log("displayRoundsToUser():i==roundCurrent-1: change consolelog to clickEnable()");
  setTimeout(function(){gameUserInput()},1900);
  } 
    if (i<roundCurrent-1) {i++;theLoop(i); }  }, 1600);})(0); 
  console.log("displayRoundsToUser() got to end")
}//displayRoundsToUser

function buttonChangeColor(buttonNumber){  // from 12oclock: red blue yellow green  0,1,2,3 
  var whichButton = null;  var newColor = "#000000";  var sound = "";
  switch(buttonNumber){case 0: whichButton="#boxRed";break; case 1: whichButton="#boxBlue";break; case 2: whichButton="#boxYellow"; break; case 3: whichButton="#boxGreen"; break; } 
  $(whichButton).css("background", newColor); setTimeout(function(){$(whichButton).removeAttr( 'style' );},900);  //now change color for 1 second. //change back after 1 second  
  console.log("buttonChangeColor() got to end");
}//buttonChangeColor

function gameUserInput(){alert("gameUserInput(): user turn!");  clickCounterUser=0; clickEnable();  
                        
}//gameUserInput()

function clickEnable(){     
  $("#boxRed").click(function(){  clickFunction(0);//alert("You clicked Red");
                               });
  $("#boxGreen").click(function(){ clickFunction(3);//alert("You clicked Green"); 
                                 });
  $("#boxYellow").click(function(){clickFunction(2);//alert("You clicked Yellow"); 
                                  });
  $("#boxBlue").click(function(){clickFunction(1);//alert("You clicked Blue"); 
                                });
} //end clickEnable

function clickDisable(){ 
  $("#boxRed").off();
  $("#boxGreen").off();
  $("#boxYellow").off();
  $("#boxBlue").off();
}

function clickFunction(boxNumber){
  //click was correct
  console.log("boxNumber:" + boxNumber + " || roundArr[clickCounterUser]:" + roundArr[clickCounterUser] + " || clickCounterUser:"+clickCounterUser +" || roundCurrent:" + roundCurrent);
  if(boxNumber == roundArr[clickCounterUser]){    
    clickCounterUser++;   
    alert("Good job right box!");
    if(clickCounterUser==roundMax ){alert("WIN GAME"); clickDisable()}   // ********************************************************************************
    else if(clickCounterUser==roundCurrent){
      alert("ALRIGHT ON TO NEXT ROUND B");
      roundCurrent++; //roundCurrent should be ++
      displayRoundCount();
      displayRoundsToUser();//call displayRoundsToUser
      
    }//if
  }
  //click was incorrect
  else { 
        alert("wrong box!");
        displayRoundsToUser(); 
       }
}//clickFunction


//*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED ********  use this to add to funcs you reuse

/*
function buttonCreateStart(){
  var b='<button id="buttonStart">START GAME</button>';
  $("#startOrRestart").html(b);
} //buttonCreateStart

function buttonCreateStrict(){
  var b='<button id="buttonStrict">STRICT MODE</button>';
  $("#strict").html(b);
}

function SimonClass(){  //class 
  this.round=[];
  this.userClick=[];
  this.strict=false; //true or false
  this.roundCurrent=null; //should be less or equal  roundMax at all times  null at beginging
 this.roundUserTry=0;  //resets to 0 after every round. 
  
  this.roundMax=5; //FOR TESTING ONLY change to 20 in production
}//end simon 

function gameInit(){ //initialize game    //*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED ******** 
  var simon = new SimonClass;  
  buttonCreateStart();
  buttonCreateStrict();
  buttonStrictEnable(simon);
  buttonStartEnable(simon);
  displayRoundCount(simon);  
}//end gameInit

function gameRestart(simon){ //clickDisable();simon.round=[];simon.userClick=[];simon.strict=false; simon.roundCurrent=null;simon.roundUserTry=0;displayRoundCount(simon);
$("#startOrRestart").html(""); //delete start 
$("#strict").html("");//delete strict  
gameInit();//call init  
}


function buttonStrictEnable(simon){$("#buttonStrict").click(function(){
  if(simon.strict==false){simon.strict=true}else{simon.strict=false}; console.log("simon.strict is:" +simon.strict)}) 
};//buttonStrictEnable
function buttonStartEnable(simon){$("#startOrRestart").click(function(){
  if(simon.round.length==0){alert("START GAME"); gameStart(simon);} else {alert("restart game"); gameRestart(simon);}
  //gameStart(simon);
})}//buttonStartEnable


function buttonCreateRestart(){   /// was removed
  var b='<button id="buttonRestart">RESTART GAME</button>'; // *********************************************************************
  $("#startOrRestart").html(b);
  $("startOrRestart").click
} //buttonCreateStart 

// *********************************************************
// GAME LOGIC***********************************************

function  gameStart(simon){ //function for starting the game   
  for(i=0;i<simon.roundMax;i++){simon.round[i]=Math.floor(Math.random()*4);}    //create allmoves  
  clickDisable(); //disable buttons
  //call game function
  console.log(simon.round);
  game(simon);  
} //end gameStart


function game(simon){//GAME FUNCTION
  //check if win
  
  //update roundCurrent
  if(simon.roundCurrent==null){simon.roundCurrent=1}else{simon.roundCurrent++;} 
  displayRoundCount(simon);
  //call function that displays  moves "one to current"
  displayRoundsToUser(simon);
  //enable clicks 
  setTimeout(clickEnable(simon), simon.roundCurrent*1500)
  //function that inputs clicks to match moves
  console.log("Im in function game")
}//end game


function buttonChangeColor(buttonNumber){  // from 12oclock: red blue yellow green  0,1,2,3 //*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED 
  var whichButton = null;
  var newColor = "#FFFFFF";
  var sound = "";
  switch(buttonNumber){
    case 0: whichButton="#boxRed";    newColor="#000000"; sound=soundRed;     break; //ff8080
    case 1: whichButton="#boxBlue";   newColor="#000000"; sound=soundBlue;    break; //66a3ff
    case 2: whichButton="#boxYellow"; newColor="#000000"; sound=soundYellow;  break; //ffffcc
    case 3: whichButton="#boxGreen";  newColor="#000000"; sound=soundGreen;   break; //b3ffcc
   } //switch
  //now change color for 1 second.
  $(whichButton).css("background", newColor);
  //play sound for 1 second also
  //soundRed.play();
  sound.play();
  //change back after 1 second
  setTimeout(function(){$(whichButton).removeAttr( 'style' );},900); 
}//buttonChangeColor


var soundRed=document.getElementById("soundRed");
var soundBlue=document.getElementById("soundBlue");
var soundYellow=document.getElementById("soundYellow");
var soundGreen=document.getElementById("soundGreen");

function userClickedThis(simon,boxNumber){
    console.log(simon.round);
  if(boxNumber==simon.round[simon.roundUserTry])   // *****************************************************************************************
  {alert("picked rightbox");simon.roundUserTry++}
  //else picked wrong box
  else {alert("WRONG BOX BRUH")}  
}// end userClickedThis

// *********************************************************
// Display functions *************************************
function displayRoundCount(simon){  //*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED ******** 
  var html = "";
  //if(arguments.length == 0){   console.log("No arguments in displaySteps()");   html += "--"  }
  //else {    console.log("simon.round.length is "+simon.round.length);    html=simon.round.length;  }
  if (simon.roundCurrent==null){html="--"}else{html=simon.roundCurrent}
  $("#round").text(html);
}  //end displayRoundCount

function displayRoundsToUser(simon){  //*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED ******** 
  //for(i=0;i<simon.roundCurrent;i++)  //dont use loop //https://scottiestech.info/2014/07/01/javascript-fun-looping-with-a-delay/
(function theLoop (i,simon) {    
  setTimeout(function () {
    //alert("simon i = " +simon.round + " ||| " + i + " |||" +simon.round[i]); 
    buttonChangeColor(simon.round[i]);;    //change color of box   //wait 1 second then uncolor
    if(i==simon.roundCurrent){clickEnable()}
    if (i<simon.roundCurrent-1) {          // If i > 0, keep going
      i++;theLoop(i,simon);       // Call the loop again, and pass it the current value of i
    }
  }, 1600);
})(0,simon);                    
}//displayRoundsToUser

function clickEnable(simon){     //*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED ******** 
  $("#boxRed").click(function(){ userClickedThis(simon,0)});  //alert("You clicked Red");
  $("#boxGreen").click(function(){userClickedThis(simon,1)}); //alert("You clicked Green"); 
  $("#boxYellow").click(function(){userClickedThis(simon,2)}); //alert("You clicked Yellow");
  $("#boxBlue").click(function(){userClickedThis(simon,3)}); //alert("You clicked Blue");
} //end clickEnable

function clickDisable(){ //*** COPIED ******** *** COPIED ******** *** COPIED *********** COPIED ******** *** COPIED ********
  $("#boxRed").off();
  $("#boxGreen").off();
  $("#boxYellow").off();
  $("#boxBlue").off();
}

function soundOnClick(){
//var soundRed=document.getElementById("soundRed");
//var soundBlue=document.getElementById("soundBlue");
//var soundYellow=document.getElementById("soundYellow");
//var soundGreen=document.getElementById("soundGreen");  
  $("#boxRed").click(function(){soundRed.play()})  //works
  $("#boxBlue").click(function(){soundBlue.play()})
  $("#boxYellow").click(function(){soundYellow.play()})
  $("#boxGreen").click(function(){soundGreen.play()})
}//soundOnClick

function lightOnClick(){
  $("#boxRed").mousedown(function()
                     {$("#boxRed").css("background", "#000000"); //setTimeout(function(){$("#boxRed").removeAttr('style');},1000);
                     
  });  //ff8080
  $("#boxRed").mouseup(function(){$("#boxRed").removeAttr('style'); //alert("mouseup called")
                                 })
  $("#boxRed").mouseout(function(){$("#boxRed").removeAttr('style');});
  $("#boxBlue").mousedown(function(){$("#boxBlue").css("background","#000000")});
  $("#boxBlue").mouseup(function(){$("#boxBlue").removeAttr('style')});
  $("#boxBlue").mouseout(function(){$("#boxBlue").removeAttr('style');});
  $("#boxGreen").mousedown(function(){$("#boxGreen").css("background","#000000")});
  $("#boxGreen").mouseup(function(){$("#boxGreen").removeAttr('style')});
  $("#boxGreen").mouseout(function(){$("#boxGreen").removeAttr('style');});
  $("#boxYellow").mousedown(function(){$("#boxYellow").css("background","#000000")});
  $("#boxYellow").mouseup(function(){$("#boxYellow").removeAttr('style')});
  $("#boxYellow").mouseout(function(){$("#boxYellow").removeAttr('style');});
  
}

// $(whichButton).css("background", newColor);

*/
</script>
