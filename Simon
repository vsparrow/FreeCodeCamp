<html>
User Story: I am presented with a random series of button presses.
<br>
User Story: Each time I input a series of button presses correctly, I see the same series of button presses but with an additional step.
<br>
User Story: I hear a sound that corresponds to each button both when the series of button presses plays, and when I personally press a button.
<br>
User Story: If I press the wrong button, I am notified that I have done so, and that series of button presses starts again to remind me of the pattern so I can try again.
<br>
User Story: I can see how many steps are in the current series of button presses.
<br>
User Story: If I want to restart, I can hit a button to do so, and the game will return to a single step.
<br>
User Story: I can play in strict mode where if I get a button press wrong, it notifies me that I have done so, and the game restarts at a new random series of button presses.
<br>
User Story: I can win the game by getting a series of 20 steps correct. I am notified of my victory, then the game starts over.
<br>
<p>
<div id="configButtons" >
  <span id="startOrRestart">Place start or restart button here</span>
  <span id="strict">Place strict button here</span>
</div>
<div id="roundIntro">Number of Steps in this round: <span id="round"></span></div>
<div id="simonButtons" class="container">
  <div class="row">
  <div id="boxRed" class="box col-xs-4"></div>
  <div id="boxGreen" class="box col-xs-4"></div>
  </div>
  <div class="row">
  <div id="boxYellow" class="box col-xs-4"></div>
  <div id="boxBlue" class="box col-xs-4"></div>  
  </div>  
</div>




<br>function needed
<br>gameInitiate -- initiate the program
<br>game start -- start the actual game instance
<br>simon class: holds array? strictmode on? 
<br>randomizer function, to choose between colors,0-3
<br>reset function/button: reset game
<br>sound function, to play sound
<br>display function: show game gfx
<br>button enable strict mode
<br>current step count display
<br>
</html>

<css>
.box {width:100px;height:100px}
#boxRed{background:#f00;}
#boxGreen {background:#0f0;}
#boxYellow {background:#FFFF00}
#boxBlue{background:#00f;}
</css>

<script>
// *****************************************
// INITIALIZE *****************************
$(document).ready(function(){
  //$("#startOrRestart").text("THIS IS WHERE THE START OR RESTART BUTTONS GO");

  buttonCreateStart();
  buttonCreateStrict();
  displayRoundCount();
}); //document ready

function buttonCreateStart(){
  var b='<button id="buttonStart">START GAME</button>';
  $("#startOrRestart").html(b);
} //buttonCreateStart

function buttonCreateStrict(){
  var b='<button id="buttonStrict">STRICT MODE</button>';
  $("#strict").html(b);
}

// *********************************************************
// GAME LOGIC***********************************************
function simonClass(){  //class 
  this.round=[];
  this.strict=false; //true or false
}//end simon 


// *********************************************************
// Display functions
function displayRoundCount(simon){
  var html = "";
  if(arguments.length == 0){
    console.log("No arguments in displaySteps()");
    html += "--"
  }
  else {
    console.log("simon.round.length is "+simon.round.length);
    html=simon.round.length;
  }
  $("#round").text(html);
}  //end displayRoundCount

</script>
